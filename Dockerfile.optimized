# Multi-stage Dockerfile otimizado para segurança e multi-arch
FROM python:3.11-slim AS base

# Security hardening e variáveis de ambiente
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Multi-stage build para otimização
FROM base AS dependencies

# Instalar UV para gerenciamento de dependências
RUN pip install uv

# Copiar arquivos de dependências
COPY pyproject.toml uv.lock ./

# Instalar dependências usando UV
RUN uv sync --frozen --no-dev

# Stage de runtime otimizado
FROM base AS runtime

# Instalar apenas o mínimo necessário para runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
    procps \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copiar Python packages do stage anterior
COPY --from=dependencies /app/.venv /app/.venv

# Adicionar venv ao PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copiar código da aplicação
COPY src/ ./src/

# Criar usuário sem privilégios e diretórios necessários
RUN groupadd -r app && useradd -r -g app -M -d /app -s /sbin/nologin app && \
    mkdir -p /data/knowledge /data/.chroma /data/logs && \
    chown -R app:app /app /data && \
    chmod 755 /app

USER app

# Health check baseado em processo (adequado para bots que não expõem portas HTTP)
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD pgrep -f "juridic_bot.main" || exit 1

# Comando padrão usando UV
CMD ["python", "-m", "src.juridic_bot.main"]